 for  card  Archives  
const deleteById = async (cardId, listId, boardId, workspaceId, user, callback) => {
  try {
    // Get models
    const card = await cardModel.findById(cardId);
    const list = await listModel.findById(listId);
    const board = await boardModel.findById(boardId);
    const workspace = await workspaceModel.findById(workspaceId);

    // Validate owner
    const validate = await helperMethods.validateCardOwners(card, list, board, workspace, user, false);
    if (!validate) {
      return callback({ errMessage: 'You dont have permission to update this card' });
    }
    // Find the workspace object based on the matching workspaceId
    const cardAvailable = list.cards.find((card) => card.toString() === cardId);
    if (!cardAvailable) {
      const errorMessage = 'card information is not correct or card not found';
      return callback({ errMessage: errorMessage });
    }

    // Check if the card is already marked as deleted
    if (card.isDeleted) {
      // If isDeleted is true, delete the card from the database
      await cardModel.findByIdAndDelete(cardId);

      // Remove the card from the list
      list.cards = list.cards.filter((tempCard) => tempCard.toString() !== cardId);
      await list.save();

      // Add activity log to the board
      board.activity.unshift({
        user: user._id,
        name: user.name,
        action: `deleted ${card.title} from ${list.title}`,
        color: user.color,
      });
      await board.save();
    } else {
      // If isDeleted is false, update the status to true
      card.isDeleted = true;
      await card.save();
    }

    return callback(false, { message: 'Success' });
  } catch (error) {
    return callback({ errMessage: 'Something went wrong', details: error.message });
  }
};
